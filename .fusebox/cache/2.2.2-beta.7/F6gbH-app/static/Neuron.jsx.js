module.exports = { contents: "\"use strict\";\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = require(\"react\");\r\nvar constants_1 = require(\"./constants\");\r\nvar recompose_1 = require(\"recompose\");\r\nvar NeuronCss = function (props) {\r\n    return React.createElement(\"circle\", __assign({}, props, { fill: props.active ? constants_1.colors.neuronActive : constants_1.colors.neuronInActive }));\r\n};\r\n{\r\n}\r\nvar Neuron = recompose_1.onlyUpdateForKeys(['active'])(NeuronCss);\r\nexports.default = NeuronCss;\r\n//# sourceMappingURL=Neuron.js.map",
dependencies: ["react","./constants","recompose"],
sourceMap: "{\"version\":3,\"file\":\"Neuron.jsx\",\"sourceRoot\":\"\",\"sources\":[\"/src/Neuron.tsx\"],\"names\":[],\"mappings\":\";;;;;;;;;;AAAA,6BAA+B;AAK/B,yCAAmC;AACnC,uCAA2C;AAM3C,IAAM,SAAS,GAAG,UAAC,KAAkB;IACnC,MAAM,CAAC,2CAAY,KAAK,IAAE,IAAI,EAAE,KAAK,CAAC,MAAM,GAAG,kBAAM,CAAC,YAAY,GAAG,kBAAM,CAAC,cAAc,IAAI,CAAA;AAChG,CAAC,CAAA;AAGD,CAAC;AAII,CAAC;AAEN,IAAM,MAAM,GAAG,6BAAiB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;AACvD,kBAAe,SAAS,CAAC\",\"sourcesContent\":[\"import * as React from \\\"react\\\";\\r\\n// var data = require(\\\"../assets/data/data.json\\\"); //easy way to load in data\\r\\nimport * as d3 from \\\"d3\\\"; //typescript uses this to import, instead of the usual import d3 from 'd3'\\r\\nimport * as _ from \\\"lodash\\\";\\r\\nimport styled from \\\"styled-components\\\";\\r\\nimport {colors} from \\\"./constants\\\";\\r\\nimport {onlyUpdateForKeys} from 'recompose'\\r\\n\\r\\ninterface NeuronProps {\\r\\n  active?: boolean;\\r\\n}\\r\\n\\r\\nconst NeuronCss = (props: NeuronProps) => {\\r\\n  return <circle {...props} fill={props.active ? colors.neuronActive : colors.neuronInActive} />\\r\\n}\\r\\n\\r\\n\\r\\n{/* \\r\\nstyled.circle`\\r\\n  fill: ${(p: NeuronProps) =>\\r\\n    p.active ? colors.neuronActive : colors.neuronInActive};\\r\\n`; */}\\r\\n\\r\\nconst Neuron = onlyUpdateForKeys(['active'])(NeuronCss)\\r\\nexport default NeuronCss;\\r\\n\"]}",
headerContent: undefined,
mtime: 1502146219662,
devLibsRequired : undefined
};